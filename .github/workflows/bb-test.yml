name: Big Bang Test

on:
  push:
  workflow_dispatch:

jobs:
  deploy-rke2:
    runs-on: ubuntu-latest
    outputs:
      kvname: ${{ steps.deploy_rke2.outputs.kvname }}

    steps:
      - uses: actions/checkout@v2      
      - name: Deploy RKE2
        id: deploy_rke2
        run: echo "::set-output name=kvname::dsop-rke2-test-20-3ob"
  
  deploy-bigbang:
    runs-on: ubuntu-latest
    needs: deploy-rke2
    env:
      KUBECONFIG: rke2.kubeconfig
    steps:
      - name: Login to Azure US Gov Cloud with CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: 'AzureUSGovernment'
          enable-AzPSSession: false

      - name: set kubeconfig
        env:
          KV_NAME: ${{ needs.deploy-rke2.outputs.kvname }}
        run: |          
          FILE=$(realpath rke2.kubeconfig)
          echo "Fetching kubeconfig from KeyVault $KV_NAME"
          az keyvault secret show --name kubeconfig --vault-name $KV_NAME -o json | jq -r '.value' > $FILE

          ls -la $FILE

          #export KUBECONFIG=$FILE
          #env | grep KUBECONFIG
          #sleep 60
          kubectl version
          
      - name: get nodes and pods
        shell: bash
        run: |
          kubectl get nodes -A
          kubectl get pods -A

      - uses: actions/checkout@v3

      - name: checkout tools-install repo
        uses: actions/checkout@v3
        with:
          repository: benc-uk/tools-install
          path: tools-install

      - name: bootstrap local tools
        shell: bash
        run: |
          chmod +x tools-install/**.sh
          echo $HOME

          mkdir -p $HOME/.local/bin
          ls -la $HOME/.local/bin         

          cd tools-install
          ./base.sh
          ./sops.sh
          ./kustomize.sh

          # ls -la $HOME/.local/bin
          echo $PATH

      - name: create ISTIO certs
        env:
          KV_NAME: ${{ needs.deploy-rke2.outputs.kvname }}
          HOSTNAME: bigbang.dev
        run: |
          ## Create Certs
          
          sudo ./scripts/create-root-cert.sh
          sudo ./scripts/create-domain-cert.sh $HOSTNAME
          ISTIO_GW_CRT=$(cat $HOSTNAME.crt | base64 -w0)
          ISTIO_GW_KEY=$(cat $HOSTNAME.key | base64 -w0)

          ## Store in AKV as secrets
          az keyvault secret set --name ISTIO_GW_CRT --vault-name $KV_NAME --encoding base64 --value "$ISTIO_GW_CRT"
          az keyvault secret set --name ISTIO_GW_KEY --vault-name $KV_NAME --encoding base64 --value "$ISTIO_GW_KEY"
