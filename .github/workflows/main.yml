name: Deploy RKE2

on:
  push:
    paths:
      - 'config.json'
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy-rke2:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # - name: Setup Python
      #   uses: actions/setup-python@v3.0.0
      
      # - uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}
      #     environment: AzureUSGovernment
      
      - name: Docker Run Action
        # You may pin to the exact commit or the version.
        # uses: addnab/docker-run-action@4f65fabd2431ebc8d299f8e5a018d79a769ae185
        uses: addnab/docker-run-action@v3
        with:
          image: shuffereu/dsopbuilder:latest
          options: -v /home/runner/work/dsop-environment/dsop-environment:/transfer
          shell: bash
          run: | 
            cp -f /transfer/config.json config/config.json
            
            export ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq .tenantId | tr -d '"')
            export ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq .clientId | tr -d '"')
            export ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq .clientSecret | tr -d '"')
            export ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq .subscriptionId | tr -d '"')
            export ARM_ENVIRONMENT=usgovernment

            az cloud set --name AzureUSGovernment
            az login --service-principal -u "${ARM_CLIENT_ID}" -p "${ARM_CLIENT_SECRET}" --tenant "${ARM_TENANT_ID}"

            python3 main.py settings --help
            python3 main.py settings validate
            python3 main.py settings list
            yes | python3 main.py rke2 apply --project foo
            cd /PyBuilder/working/dsop_rke2/foo
            
            # source ../scripts/fetch-kubeconfig.sh
            
            DIRECTORY=$(dirname $0)

            KV_NAME=${1:-$(terraform output -raw kv_name)}
            FILE=$(realpath rke2.kubeconfig)

            echo "Fetching kubeconfig from KeyVault $KV_NAME"
            az keyvault secret show --name kubeconfig --vault-name $KV_NAME -o json | jq -r '.value' > $FILE
            
            
            ls -la /PyBuilder/working/dsop_rke2/foo/rke2.kubeconfig
            cp /PyBuilder/working/dsop_rke2/foo/rke2.kubeconfig /transfer
          # Registry
          # registry: # optional
          # Username
          # username: # optional
          # Password
          # password: # optional
          # Docker Network ID
          # docker_network: # optional, default is ${{ job.container.network }}
      - run: ls -la rke2.kubeconfig
      - uses: actions/upload-artifact@master
        with:
          name: kubeconfig
          path: rke2.kubeconfig

  
  deploy-bigbang:
    runs-on: ubuntu-latest
    needs: deploy-rke2
    steps:
      - uses: actions/download-artifact@master
        with:
          name: kubeconfig
          path: rke2.kubeconfig
      - name: Kubernetes toolset
        uses: stefanprodan/kube-tools@v1.7.1
        with:
          command: |
            export KUBECONFIG=rke2.kubeconfig
            kubectl get nodes -A